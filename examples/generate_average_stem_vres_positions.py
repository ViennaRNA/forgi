#!/usr/bin/python

from __future__ import print_function
from builtins import map
import collections as c
import itertools as it
import sys
import argparse
import logging

import numpy as np

import forgi.threedee.model.coarse_grain as ftmc
import forgi.threedee.utilities.graph_pdb as ftug
import forgi.threedee.utilities.pdb as ftup
import forgi.threedee.utilities.vector as ftuv
import forgi.utilities.commandline_utils as fuc

log = logging.getLogger(__name__)


def main(parser):
    args = parser.parse_args()

    vatom_positions = c.defaultdict(lambda: c.defaultdict(lambda:c.defaultdict(list)))

    for cg in fuc.iter_cgs_from_args(args, rna_type="pdb", 
                                     enable_logging=True, skip_errors=True):
        log.error("Processing RNA %s", cg.name)
        if len(list(cg.stem_iterator())) == 0:
            log.warning("Skipping RNA (%s): no stems", cg.name)
            continue
        cg.add_all_virtual_residues()
        
        for d in cg.defines.keys():            
            if d[0] != "s":
                continue
            if np.allclose(cg.coords[d][0], cg.coords[d][1]):
                log.warning(
                    "Skipping element %s of RNA (%s): degenerate coordinates.", d, cg.name)
                continue

            for r in cg.define_residue_num_iterator(d):

                # add only the base atoms which are relevant to the calculation
                # of the chi torsion angle
                seq_id = cg.seq.to_resid(r)
                resname = cg.chains[seq_id.chain][seq_id.resid].resname.strip()

                if resname not in "AUGC":
                    print("Unknown nucleotide name:", resname, file=sys.stderr)
                    continue

                atoms = ftup.nonsidechain_atoms + \
                    ftup.chi_torsion_atoms[resname][-2:]
                scatoms = ftup.side_chain_atoms[resname]
                pos_in_stem, side = cg.stem_resn_to_stem_vres_side(d, r)
                origin = cg.vposs[d][pos_in_stem]
                basis = cg.vbases[d][pos_in_stem]
                for aname in atoms + scatoms:
                    try:
                        resid = cg.seq.to_resid(r)
                        a = cg.chains[resid.chain][resid.resid][aname]
                    except KeyError as ke:
                        # missing an atom
                        continue

                    avec = a.get_vector().get_array()
                    atom_pos = ftuv.change_basis(
                        avec - origin, basis, ftuv.standard_basis)
                    vatom_positions[side][resname][aname].append(atom_pos)
                    
    print("\"\"\"Generated by running:\n {}\n\"\"\"".format(" ".join(sys.argv)))
    print("import collections as co")
    print("avg_stem_vres_atom_coords = [co.defaultdict(dict), co.defaultdict(dict)])\n\n")
    
    for side, dict1 in sorted(vatom_positions.items()):
        for resname, dict2 in sorted(dict1.items()):
            for aname, pos_list in sorted(dict2.items()):
                print("avg_stem_vres_atom_coords[{}][{}][{}] = [\n{}]".format(side, resname, aname, "{}, {}, {}".format(*np.mean(pos_list, axis=0))))

parser = fuc.get_rna_input_parser("Generate the file forgi/threedee/utilities/average_stem_vres_atom_positions.py based on pdb structures givewn as input",
                                  nargs="+", rna_type="pdb", enable_logging=True)

if __name__ == '__main__':
    main(parser)
